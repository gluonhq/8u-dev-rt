/*
 * Copyright (c) 2014, 2015, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

import org.gradle.api.GradleException

/**
 * Gets the most recent android platform installed, relative to the given path.
 * The path will either be ANDROID_SDK or ANDROID_NDK
 * TODO Shouldn't we instead just ask people to point to the one they want to use?
 *
 * @param path The path to the Android SDK or NDK
 * @return The name of the most recent platform
 */
String getLatestPlatform(String path) {
    def max = 0
    println("$path")
    file(cygpath("$path/platforms")).eachFile() {file->
        def pname = file.getName() - "android-"
        def ptf = pname?.isInteger() ? pname.toInteger() : 0
        if (max < ptf) {
            max = ptf
        }
    }
    if (max == 0) {
        return null;
    }
    return "android-" + max
}

int compareVersions(String s1, String s2) {
    def v1t = s1.tokenize(".")
    def v2t = s2.tokenize(".")
    for(int i = 0; i < v1t.size(); i++) {
        if (i == v2t.size()) {
            return 1
        }
        int n1 = v1t[i].isInteger() ? v1t[i].toInteger() : 0
        int n2 = v2t[i].isInteger() ? v2t[i].toInteger() : 0
        if (n1 == n2) {
            continue
        } else if (n1 > n2) {
            return 1;
        } else {
            return -1
        }        
    }    
    return (v2t.size() > v1t.size()) ? -1 : 0
}

String getLatestToolchain(String ndk, String tch) {
    def max = "0.0"
    def matchFile = null
    file(cygpath("$ndk/toolchains")).eachFile() {file->        
        def filename = file.getName()
        if (filename.startsWith(tch)) {
                matchFile = file
            // def p = filename - "$tch-"
            // if (compareVersions(p, max) > 0) {
                // max = p
                // matchFile = file
            // }
        }
    }
    return matchFile.getAbsolutePath()
}

boolean assertDir(File dir) {
    return dir != null && dir.exists() && dir.isDirectory() && dir.canRead();
}

boolean assertDir(String dir) {
    return assertDir(file(dir))
}

def closedDir = file("$projectDir/../rt-closed")

def toolchainArchs = ["llvm", "aarch64-linux-android-4.9","arm-linux-androideabi", "mipsel-linux-android", "x86"]
def armArchs = ["arm64-v8a", "armeabi-v7a"]
def libArchs = ["arm64v8a", "armeabiv7a"]

ext.DALVIK = [:]
DALVIK.compileSwing = false;
DALVIK.compileSWT = false;
DALVIK.compileFXPackager = false;
DALVIK.compileDesignTime = false;
DALVIK.glassPlatform = "android"
DALVIK.armArch = armArchs[0]
DALVIK.libDest = "lib"
DALVIK.jfxdvklib = "jfxdvk.jar"
DALVIK.library = { name -> return "lib${name}.so" as String }
DALVIK.includeMonocole = true
DALVIK.includeLens = false

def sdk = project.hasProperty("ANDROID_SDK") ? "${ANDROID_SDK}" : null;
def ndk = project.hasProperty("ANDROID_NDK") ? "${ANDROID_NDK}" : null;
DALVIK.canBuild = sdk != null && ndk != null
if (!DALVIK.canBuild) {
    logger.error("Can't build Android. Path to SDK or NDK was not set or is invalid!")
    return;
}

DALVIK.canBuild = assertDir(sdk) && assertDir(ndk)
if (!DALVIK.canBuild) {
    if (!assertDir(sdk)) {
        logger.error("Path to ANDROID_SDK is invalid! [$sdk]")
    }
    if (!assertDir(ndk)) {
        logger.error("Path to ANDROID_NDK is invalid! [$ndk]")
    }
    return
}

def sdk_target = project.hasProperty("ANDROID_SDK_TARGET") ?  "${ANDROID_SDK_TARGET}" : getLatestPlatform(sdk);
if (!assertDir(file("$sdk/platforms/$sdk_target"))) {            
    sdk_target = getLatestPlatform(sdk); 
    logger.warn("Redefine ANDROID_SDK_TARGET to: [$sdk_target]")
}

def ndk_target = project.hasProperty("ANDROID_NDK_TARGET") ? "${ANDROID_NDK_TARGET}" : getLatestPlatform(ndk);
if (!assertDir(file("$ndk/platforms/$ndk_target"))) {            
    ndk_target = getLatestPlatform(ndk);
    logger.warn("Redefine ANDROID_NDK_TARGET to: [$ndk_target]")
}

DALVIK.canBuild = sdk_target != null && ndk_target != null
if (!DALVIK.canBuild) {
    logger.error("Can't determine sdk or ndk target platform!")
    return
}

def toolchainHome = project.hasProperty("ANDROID_CROSS_TOOLS_VER") ? 
    "$ndk/toolchains/${ANDROID_CROSS_TOOLS_VER}" : getLatestToolchain(ndk, toolchainArchs[0])
if (!assertDir(toolchainHome)) {
    toolchainHome = getLatestToolchain(ndk, toolchainArchs[0])
    logger.warn("Redefine toolchain to [$toolchainHome]")
}

// Look for the the Android SDK & NDK to use, as well as the compiler stuff
def compilerHome = null
file("$toolchainHome/prebuilt").eachDir() {subdir ->
    compilerHome = subdir.getAbsolutePath()
    return
}

DALVIK.canBuild = compilerHome != null
if (!DALVIK.canBuild) {
    logger.error("Failed to access toolchain [$toolchainHome/prebuilt/$toolsPlatform]!")
    return
}

def freetypeDir = project.hasProperty("FREETYPE_DIR") ? "${FREETYPE_DIR}" : null
if (!assertDir(freetypeDir)) {
    logger.warn("FREETYPE_DIR $freetypeDir doesn't exists! Build continues without native text support.")
    freetypeDir = null
}
def compileNativeText = freetypeDir != null

// def compiler = file("$compilerHome/bin/${toolchainArchs[0]}-gcc").getAbsolutePath()
// def linker = file("$compilerHome/bin/${toolchainArchs[0]}-g++").getAbsolutePath()
def compiler = file("$compilerHome/bin/clang").getAbsolutePath()
def linker = file("$compilerHome/bin/clang++").getAbsolutePath()

// Define the wearable version in the 'com.google.android.support:wearable' artifact
// Required by the FXWearableActivity
def wearableVersion = "2.0.0"

// Log the settings we're building with
logger.quiet("ANDROID_SDK: $sdk")
logger.quiet("ANDROID_SDK_TARGET: $sdk_target")
logger.quiet("ANDROID_NDK: $ndk")
logger.quiet("ANDROID_NDK_TARGET: $ndk_target")
logger.quiet("FREETYPE_DIR: $freetypeDir")
logger.quiet("Compile native text: $compileNativeText") 
logger.quiet("Android Compiler: $compiler")
logger.quiet("Android Linker: $linker")

//exclude from build
project(":swing") {
    apply plugin: 'java'

    compileJava {
        enabled = false
    }
}

project(":fxml") {
    apply plugin: 'java'

    jar.dependsOn("retroClass");

    compileJava {
        enabled = true
    }
}

project(":jmx") {
    apply plugin: 'java'

    compileJava {
        enabled = false
    }
}


allprojects() {
    repositories {
        mavenCentral()
    }
    configurations {
        retroconfig
    }

    dependencies {
        retroconfig 'net.orfjackal.retrolambda:retrolambda:2.0.5'
    }
    task retroClass() <<{
            file classdirs = file ("$buildDir/classes");
            lf = classdirs.listFiles();
            classdirs.eachDir{t -> 
                javaexec {
                    executable = "$JDK_HOME/bin/java"
                    inputdir = t
                    basecp = files(lf, "modules/base/build/classes/main", "modules/graphics/build/classes/main", "modules/controls/build/classes/main").asPath
                    myconfig = configurations.retroconfig;
                    lambdaloc = myconfig.resolve().toArray()[0];
                    classpath = configurations.retroconfig
                    main = 'net.orfjackal.retrolambda.Main'
                    jvmArgs = [
                               "-Xbootclasspath:$JDK_HOME/jre/lib/rt.jar",
                                "-Dretrolambda.inputDir=$inputdir",
                                "-Dretrolambda.classpath=$basecp",
                                "-Dretrolambda.bytecodeVersion=51",
                                "-javaagent:$lambdaloc"
                   ]
            }
        }
    }
}


project(":base") {
    apply plugin: 'java'
    jar.dependsOn("retroClass");
}

project(":web") {
    apply plugin: 'java'
    jar.dependsOn("retroClass");
    compileJava.dependsOn(":graphics:assemble");
    sourceSets.main.java.srcDirs = ['src/android/java'];
    sourceSets {
        main {
            java {
                srcDirs= ['src/android/java']
            }
        }
    }
    dependencies {
         compile files("../graphics/build/classes/dalvik");
    }

    afterEvaluate {
        sourceSets.main.java.srcDirs = ['src/android/java'];
        def compileWebJavaAndroid = task("compileWebJavaAndroid",
            type: JavaCompile, group: "Build") {

            dependsOn(project(":graphics").classes, project(":base").classes)
            description = "Task compiles web component for Android."
            classpath = files(
                project(":controls").sourceSets.main.output.classesDir,
                project(":graphics").sourceSets.main.output.classesDir,
                project(":base").sourceSets.main.output.classesDir,
                "modules/graphics/build/classes/dalvik"
            )
            destinationDir = file("modules/web/build/classes/android")
            dependencyCacheDir = file("modules/web/build/dependency-cache")
            source file("modules/web/src/android/java")
        }

        def jarWebJavaAndroid = task("jarWebJavaAndroid",
            type: Jar, group: "Build") {
            description = "Creates web.jar for Android."
            dependsOn(compileWebJavaAndroid)
            archiveName = "web.jar"
            includeEmptyDirs = false
            destinationDir = project.file("build/libs/android")
            from("build/classes/android")
        }
        addNative(project, "webview")
        // addNative(project, "dvkwebview")
        javahDalvikWebview.dependsOn(compileWebJavaAndroid)
        // javahDalvikDvkwebview.dependsOn(compileWebJavaAndroid)

        jfxrtDalvik {
            from "modules/web/build/classes/android"
        }

        sdkDalvik  {
            dependsOn(jarWebJavaAndroid)
            doLast {
                def props = project.ext["DALVIK"]
                (0..1).each {
                    def lib = libArchs[it]
                    def armArch = armArchs[it]
                    copy {
                        from("modules/web/build/libs/webview/dalvik/$lib")
                        into("build/dalvik-sdk/rt/${props.libDest}/$armArch")
                    }
                }
            }
        }
    }


    jar.dependsOn("retroClass");
}

project(":media") {
    apply plugin: 'java'
    jar.dependsOn("retroClass");
}


project(":graphics") {

    apply plugin: 'java'

    sourceSets.main.java {
        exclude "com/sun/glass/ui/swt/**"
    }
    
    File googleMavenRepository = project.file("$sdk/extras/google/m2repository")
    if (googleMavenRepository.exists()) {
        logger.info("Adding $googleMavenRepository.absolutePath to repositories.")
        repositories {
            maven {
                url googleMavenRepository.toURI().toString()
            }
        }
    } else {
        throw new GradleException("Unable to find Google repository at: " + googleMavenRepository)
    }
    
    configurations {
        androidCompile
    }

    dependencies {
        androidCompile ("com.google.android.support:wearable:$wearableVersion") { transitive = false }
    }
    
    task explodeAarDependencies {
        configurations.each { configuration ->
            Set<File> files = configuration.copy().resolve()
            files.findAll {
                it.name.endsWith('.aar')
            }.each { aarFile ->
                def aarFileWithoutExtension = aarFile.name.take(aarFile.name.lastIndexOf('.'))
                final File explodedDirectory = new File(aarFile.parent, "exploded")
                if (!explodedDirectory.exists()) {
                    logger.info("Explode aar file: $aarFile into $explodedDirectory")

                    if (!explodedDirectory.mkdirs()) {
                        throw new GradleException("Unable to create base directory to explode aar into: " + explodedDirectory)
                    }

                    copy {
                        from zipTree(aarFile)
                        into file(explodedDirectory)
                        include 'classes.jar'
                        include 'libs/*.jar'
                        rename('classes.jar', "${aarFileWithoutExtension}.jar")
                    }
                }

                if (file("$explodedDirectory.absolutePath/${aarFileWithoutExtension}.jar").exists()) {
                    dependencies.add(configuration.name, project.files("$explodedDirectory.absolutePath/${aarFileWithoutExtension}.jar"))
                }
                if (file("$explodedDirectory.absolutePath/libs").exists()) {
                    files(file("$explodedDirectory.absolutePath/libs").listFiles()).findAll {
                        it.name.endsWith('.jar')
                    }.each {
                        dependencies.add(configuration.name, project.files(it))
                    }
                }
            }
        }
    }
    
    assemble.dependsOn("retroClass");
    task compileDalvikLibs(type: JavaCompile, group: "Build", dependsOn: explodeAarDependencies) {
        description = "Task compiles dalvik vm based libraries."
        options.bootClasspath = "$sdk/platforms/$sdk_target/android.jar" + File.pathSeparator + configurations.androidCompile.asPath
        classpath = files("build/classes/dalvik", "build/classes/main")
        destinationDir = file("build/classes/dalvik")
        dependencyCacheDir = file("build/dependency-cache")
        source fileTree(dir: 'src/dalvik/java').matching { include '**' }
    }

    task jarDalvikLibs(type: Jar, group: "Build", dependsOn: compileDalvikLibs) {
        description = "Creates jfxdvk.jar with all dalvik based classes."
        archiveName = "jfxdvk.jar"
        includeEmptyDirs = false
        from("build/classes/dalvik")
        include("javafxports/**/*")
        include("com/oracle/**/*")
        dependsOn(compileDalvikLibs)
    }
    
    jarDalvikLibs {
        eachFile {
                if (it.name.endsWith('.class')) {
                    RandomAccessFile raf = new RandomAccessFile(it.file.path, "rw");
                    raf.seek(7);
                    raf.writeByte(0x32); //make it jdk6
                    raf.close();
                }
            }
    }
     
    afterEvaluate {
        addNative(project, "activity")
        if (compileNativeText) {
            addNative(project, "fontNativeFreetype")
        }
        tasks["javahDalvikGlass"].dependsOn(compileDalvikLibs)
        tasks["javahDalvikActivity"].dependsOn(compileDalvikLibs)
        tasks["native"].dependsOn("nativeActivity")
        if (compileNativeText) {
            tasks["native"].dependsOn("nativeFontNativeFreetype")
        }
        tasks["javahDalvikPrismSW"].enabled = false
        tasks["ccDalvikPrismSW"].enabled = false;
        tasks["linkDalvikPrismSW"].enabled = false;
        
        sdkDalvik  {
            dependsOn(jarDalvikLibs)
            doLast {
                def props = project.ext["DALVIK"]
                (0..1).each {
                    def lib = libArchs[it]
                    def armArch = armArchs[it]
                    copy {
                        from("modules/graphics/build/libs/activity/dalvik/$lib")
                        from("modules/graphics/build/libs/font/dalvik/$lib")
                        from("modules/graphics/build/libs/glass/dalvik/$lib")
                        from("modules/graphics/build/libs/iio/dalvik/$lib")
                        from("modules/graphics/build/libs/prism/dalvik/$lib")
                        from("modules/graphics/build/libs/prismES2/dalvik/$lib")
                        into("build/dalvik-sdk/rt/${props.libDest}/$armArch")
                    }
                }
                copy {
                    from ("modules/graphics/build/libs/${props.jfxdvklib}")
                    into ("build/dalvik-sdk/rt/lib/ext")
                }
/*
                copy {
                    from ("modules/compat/build/libs/compat.jar")
                    into ("build/dalvik-sdk/rt/lib/ext")
                }
*/
                if (compileNativeText) {
                    (0..1).each {
                        def lib = libArchs[it]
                        def armArch = armArchs[it]
                        copy {
                            from("modules/graphics/build/libs/fontNativeFreetype/dalvik/$lib")
                            into("build/dalvik-sdk/rt/${props.libDest}/$armArch")
                        }
                    }
                }
            }
        }
    }
}

project(":controls") {

    apply plugin: 'java'
/*
    compileJava {
         options.bootClasspath="/home/johan/open-jfx/bitbucket/8u-dev-build/compat/build/libs/compat-1.0.0.jar:$sdk/platforms/$sdk_target/android.jar"
     }
*/


    sourceSets.main.java.srcDir('src/android/java')
/*
    sourceSets.main.java {
        exclude 'javafx/scene/control/Date*.java'
        exclude 'com/sun/javafx/scene/control/skin/Date*.java'
        exclude 'com/sun/javafx/scene/control/behavior/Date*.java'
    }
*/
    task copyResources() << {
        copy {
            from ("src/android/resources")
            into ("build/resources/dalvik")
        }
    }

    assemble.dependsOn("copyResources","retroClass");

    afterEvaluate {

        jfxrtDalvik {
            from ("modules/controls/build/classes/dalvik",
                  "modules/controls/build/resources/dalvik")
        }

    }
}        

allprojects {
    afterEvaluate {
        sdkDalvik {
            doLast {
                ant.jar(update: "true", destfile: "build/dalvik-sdk/rt/lib/ext/jfxrt.jar", 
                    basedir: "build/dalvik-sdk/rt/lib", includes: "*.properties")
            }
        }
    }
}


DALVIK.jfxrtJarExcludes = [
    "**/*.hlsl",
    "com/sun/glass/ui/win",
    "com/sun/glass/ui/accessible/win",    
    "com/sun/prism/j2d",
    "com/sun/prism/sw",
    "com/sun/glass/ui/accessible/mac",
    "com/sun/glass/ui/ios",
    "com/sun/glass/ui/swt", // SWT glass
    "com/oracle/dalvik",
    // "javafx/scene/media", //exclude all media for now
    // "com/sun/media",
    // "com/sun/javafx/media",
    "com/sun/javafx/font/directwrite", //exclude non freetype font support
    "com/sun/javafx/font/coretext",
    "com/sun/javafx/font/freetype/Pango*",
    "com/sun/javafx/font/freetype/OSPango*",
    // "com/sun/webkit",   //exclude all WebView for now
    // "com/sun/javafx/webkit",
    // "com/sun/javafx/scene/web",
    // "javafx/scene/web",
    // "com/sun/javafx/sg/prism/NGWeb*",
    // "com/sun/javafx/sg/prism/web*",
    "javafx/print", //exclude printing
    "com/sun/javafx/print",
    "com/sun/javafx/tk/Print*"
]

def text = (compileNativeText) ? "native" : "t2k"

DALVIK.javafxPlatformProperties = """
javafx.platform=android
android.javax.xml.stream.XMLInputFactory=com.sun.xml.stream.ZephyrParserFactory
android.javax.xml.stream.XMLOutputFactory=com.sun.xml.stream.ZephyrWriterFactory
android.javax.xml.stream.XMLEventFactory=com.sun.xml.stream.events.ZephyrEventFactory
android.glass.platform=Monocle
android.monocle.platform=Android
android.glass.lens=eglfb
android.log.lens=FINEST
android.prism.verbose=true
DALVIK.prism.verbose=true
android.prism.glDepthSize=16
android.prism.lcdtext=false
android.prism.debugfonts=true
android.prism.text=$text
android.embedded=monocle
android.prism.allowhidpi=true
android.prism.maxTextureSize=2048
android.prism.dirtyopts=true
android.prism.vsync=false
android.use.egl=true
android.com.sun.javafx.isEmbedded=true
com.sun.javafx.gestures.zoom=true
com.sun.javafx.gestures.rotate=true
com.sun.javafx.gestures.scroll=true
"""

def ccFlags = ["--sysroot=$ndk/sysroot","-std=c99", "-DANDROID", "-c", "-nostdlib", 
               "-DANDROID_NDK", "-DDALVIK_VM",
               "-I$ndk/sysroot/usr/include/${toolchainArchs[0]}"]

def ccOptFlags = ["-fpic", "-ffunction-sections", "-funwind-tables","-fstack-protector",
                  "-Os", "-O2", "-fno-strict-aliasing", "-fomit-frame-pointer"]
def ccWarnFlags = ["-Wa,--noexecstack"] //, "-Wno-psabi"]
def ccArchFlags = []
if (DALVIK.armArch == 'armeabi') {
    ccArchFlags = ["-mthumb", "-msoft-float", "-D__ARM_ARCH_5__", "-D__ARM_ARCH_5T__", "-D__ARM_ARCH_5E__",
                   "-D__ARM_ARCH_5TE__", "-march=armv5te" , "-mtune=xscale"]
} else if (DALVIK.armArch == 'armeabi-v7a') {
    ccArchFlags = ["-mthumb", "-mfloat-abi=softfp", "-mfpu=vfpv3-d16"]
} else if (DALVIK.armArch == 'arm64-v8a') {
    ccArchFlags = ["-target", "aarch64-linux-android21"]
}
def ccArmeabiv7aFlags = ["-target", "armv7a-linux-androideabi21"]
def ccArm64v8aFlags = ["-target", "aarch64-linux-android21"]

def ccDebugFlags = [IS_DEBUG_NATIVE ? "-DDEBUG" : "-DNDEBUG"]
def ccDefaultIncludeFlags = ["-I$ndk/platforms/$ndk_target/arch-arm64/usr/include"]

def linkFlags = [// "--sysroot=$ndk/platforms/$ndk_target/arch-arm64",
                 "-Wl,--no-undefined", "-Wl,-z,noexecstack", "-lc", "-lm", "-shared",
                 "-L$ndk/platforms/$ndk_target/arch-arm64/usr/lib"]
def linkArmeabiv7aFlags = ["-target", "armv7a-linux-androideabi21"]
def linkArm64v8aFlags = ["-target", "aarch64-linux-android21"]
def linkArchFlags = []


DALVIK.activity = [:]
DALVIK.activity.variants = ["armeabiv7a", "arm64v8a"]
DALVIK.activity.armeabiv7a = [:]
DALVIK.activity.arm64v8a = [:]

DALVIK.activity.javahSource = files("modules/graphics/build/classes/dalvik")
DALVIK.activity.javahClasspath = files("modules/graphics/build/classes/dalvik", \
"$sdk/platforms/$sdk_target/android.jar", \
"$sdk/extras/google/m2repository/com/google/android/support/wearable/$wearableVersion/exploded/wearable-${wearableVersion}.jar")
DALVIK.activity.javahInclude = ["javafxports/android/**"]

DALVIK.activity.armeabiv7a.nativeSource = file("modules/graphics/src/dalvik/native")
DALVIK.activity.armeabiv7a.compiler = compiler
DALVIK.activity.armeabiv7a.linker = linker
DALVIK.activity.armeabiv7a.lib = "activity"
DALVIK.activity.armeabiv7a.ccFlags = [ccFlags, ccWarnFlags, ccArmeabiv7aFlags, ccOptFlags,
    ccDebugFlags, ccDefaultIncludeFlags].flatten()
DALVIK.activity.armeabiv7a.linkFlags = [linkFlags, linkArmeabiv7aFlags, "-landroid", "-llog"].flatten()

DALVIK.activity.arm64v8a.nativeSource = file("modules/graphics/src/dalvik/native")
DALVIK.activity.arm64v8a.compiler = compiler
DALVIK.activity.arm64v8a.linker = linker
DALVIK.activity.arm64v8a.lib = "activity"
DALVIK.activity.arm64v8a.ccFlags = [ccFlags, ccWarnFlags, ccArchFlags, ccOptFlags,
    ccDebugFlags, ccDefaultIncludeFlags].flatten()
DALVIK.activity.arm64v8a.linkFlags = [linkFlags, linkArm64v8aFlags, "-landroid", "-llog"].flatten()

DALVIK.webview = [:]
DALVIK.webview.variants = ["armeabiv7a", "arm64v8a"]
DALVIK.webview.armeabiv7a = [:]
DALVIK.webview.arm64v8a = [:]

DALVIK.webview.javahSource = files("modules/web/build/classes/android")
DALVIK.webview.javahClasspath = files("modules/web/build/classes/android")
DALVIK.webview.javahInclude = [
    "com/sun/webkit/NativeWebView.class"
]
DALVIK.webview.armeabiv7a.nativeSource = [
    files("modules/web/src/android/native/native_webview.c",
"modules/web/src/android/native/android_webview.c")
]
DALVIK.webview.armeabiv7a.compiler = compiler
DALVIK.webview.armeabiv7a.linker = linker
DALVIK.webview.armeabiv7a.lib = "webview"
DALVIK.webview.armeabiv7a.ccFlags = [ccFlags, ccWarnFlags, ccArmeabiv7aFlags, ccOptFlags,
    ccDebugFlags, ccDefaultIncludeFlags].flatten()
DALVIK.webview.armeabiv7a.linkFlags = [linkFlags, linkArmeabiv7aFlags, "-ldl", "-llog"].flatten()
DALVIK.webview.arm64v8a.nativeSource = [
    files("modules/web/src/android/native/native_webview.c",
"modules/web/src/android/native/android_webview.c")
]
DALVIK.webview.arm64v8a.compiler = compiler
DALVIK.webview.arm64v8a.linker = linker
DALVIK.webview.arm64v8a.lib = "webview"
DALVIK.webview.arm64v8a.ccFlags = [ccFlags, ccWarnFlags, ccArm64v8aFlags, ccOptFlags,
    ccDebugFlags, ccDefaultIncludeFlags].flatten()
DALVIK.webview.arm64v8a.linkFlags = [linkFlags, linkArm64v8aFlags, "-ldl", "-llog"].flatten()

DALVIK.dvkwebview = [:]
DALVIK.dvkwebview.javahSource = files("modules/web/build/classes/android")
DALVIK.dvkwebview.javahClasspath = files("modules/web/build/classes/android")
DALVIK.dvkwebview.javahInclude = [
    "com/sun/webkit/NativeWebView.class"
]
DALVIK.dvkwebview.nativeSource = [
    file("modules/web/src/android/native/android_webview.c")
]
DALVIK.dvkwebview.compiler = compiler
DALVIK.dvkwebview.linker = linker
DALVIK.dvkwebview.lib = "android_webview"
DALVIK.dvkwebview.ccFlags = [ccFlags, ccWarnFlags, ccArchFlags, ccOptFlags,
    ccDebugFlags, ccDefaultIncludeFlags].flatten()
DALVIK.dvkwebview.linkFlags = [linkFlags, linkArchFlags, "-ldl", "-llog"].flatten()

DALVIK.glass = [:]
// DALVIK.glass.variants = ["eglfb", "lensport"]
DALVIK.glass.variants = []
// DALVIK.glass.variants = ["monocle"]
DALVIK.glass.variants = ["armeabiv7a", "arm64v8a"]
DALVIK.glass.javahSource = files("modules/graphics/build/classes/dalvik",
 "modules/graphics/build/classes/main")
DALVIK.glass.javahClasspath = files("modules/graphics/build/classes/main",
 "modules/graphics/build/classes/dalvik",
 "modules/base/build/classes/main",
 "$sdk/platforms/$sdk_target/android.jar",
 "$sdk/extras/google/m2repository/com/google/android/support/wearable/$wearableVersion/exploded/wearable-${wearableVersion}.jar")
DALVIK.glass.javahInclude = [
    "javafxports/android/**",
    "com/sun/glass/ui/monocle/*",
    "com/sun/glass/ui/monocle/util/*",
    "com/sun/glass/events/**",
    "com/sun/glass/ui/*",
    "com/sun/glass/ui/android/*",
    "com/sun/glass/ui/lens/*"]

def monocleArmeabiCFlags = [ccFlags, ccWarnFlags, ccArmeabiv7aFlags, ccOptFlags,
    ccDebugFlags, ccDefaultIncludeFlags, "-DISEGLFB",
    "-I", file("modules/graphics/src/main/native-glass/monocle/"),
    "-I", file("modules/graphics/src/dalvik/native/")].flatten()

def monocleArm64CFlags = [ccFlags, ccWarnFlags, ccArm64v8aFlags, ccOptFlags,
    ccDebugFlags, ccDefaultIncludeFlags, "-DISEGLFB",
    "-I", file("modules/graphics/src/main/native-glass/monocle/"),
    "-I", file("modules/graphics/src/dalvik/native/")
].flatten()

DALVIK.glass.armeabiv7a = [:]
DALVIK.glass.armeabiv7a.nativeSource = [
        file("modules/graphics/src/main/native-glass/monocle"),
        file("modules/graphics/src/main/native-glass/monocle/android"),
        file("modules/graphics/src/main/native-glass/monocle/util") ]
DALVIK.glass.armeabiv7a.compiler = compiler
DALVIK.glass.armeabiv7a.ccFlags = monocleArmeabiCFlags
DALVIK.glass.armeabiv7a.linker = linker
DALVIK.glass.armeabiv7a.linkFlags =  [linkFlags, linkArmeabiv7aFlags, "-ldl", "-llog", "-landroid", "-lGLESv2", "-lEGL"].flatten()
DALVIK.glass.armeabiv7a.lib = "glass_monocle"

DALVIK.glass.arm64v8a = [:]
DALVIK.glass.arm64v8a.nativeSource = [
        file("modules/graphics/src/main/native-glass/monocle"),
        file("modules/graphics/src/main/native-glass/monocle/android"),
        file("modules/graphics/src/main/native-glass/monocle/util") ]
DALVIK.glass.arm64v8a.compiler = compiler
DALVIK.glass.arm64v8a.ccFlags = monocleArm64CFlags
DALVIK.glass.arm64v8a.linker = linker
DALVIK.glass.arm64v8a.linkFlags =  [linkFlags, linkArm64v8aFlags, "-ldl", "-llog", "-landroid", "-lGLESv2", "-lEGL"].flatten()
DALVIK.glass.arm64v8a.lib = "glass_monocle"

DALVIK.javafxPlatformDefault="eglfb"

def monoclePlatformAdditions = """
monocle.glass.platform=Monocle
monocle.prism.order=es2,sw
monocle.prism.eglfb=true
monocle.prism.lcdtext=false
monocle.prism.maxvram=128m
monocle.prism.targetvram=112m
monocle.use.egl=true
monocle.use.gles2=true
monocle.embedded=monocle
monocle.com.sun.javafx.isEmbedded=true
monocle.doNativeComposite=true
monocle.com.sun.javafx.scene.control.skin.FXVK.cache=true
monocle.prism.glDepthSize=0
monocle.com.sun.javafx.gestures.zoom=true
monocle.com.sun.javafx.gestures.rotate=true
monocle.com.sun.javafx.gestures.scroll=true"""



DALVIK.prism = [:]
DALVIK.prism.javahInclude = ["com/sun/prism/impl/**/*", "com/sun/prism/PresentableState*"]
DALVIK.prism.variants = ["armeabiv7a", "arm64v8a"]

DALVIK.prism.armeabiv7a = [:]
DALVIK.prism.arm64v8a = [:]
DALVIK.prism.armeabiv7a.nativeSource = file("modules/graphics/src/main/native-prism")
DALVIK.prism.armeabiv7a.compiler = compiler
DALVIK.prism.armeabiv7a.ccFlags = [ccFlags, ccWarnFlags, ccArmeabiv7aFlags, ccOptFlags,
    ccDebugFlags, ccDefaultIncludeFlags].flatten()
DALVIK.prism.armeabiv7a.linker = linker
DALVIK.prism.armeabiv7a.linkFlags = [linkFlags, linkArmeabiv7aFlags, "-ldl", "-landroid", "-llog"].flatten()
DALVIK.prism.armeabiv7a.lib = "prism_common"

DALVIK.prism.arm64v8a.nativeSource = file("modules/graphics/src/main/native-prism")
DALVIK.prism.arm64v8a.compiler = compiler
DALVIK.prism.arm64v8a.ccFlags = [ccFlags, ccWarnFlags, ccArm64v8aFlags, ccOptFlags,
    ccDebugFlags, ccDefaultIncludeFlags].flatten()
DALVIK.prism.arm64v8a.linker = linker
DALVIK.prism.arm64v8a.linkFlags = [linkFlags, linkArm64v8aFlags, "-ldl", "-landroid", "-llog"].flatten()
DALVIK.prism.arm64v8a.lib = "prism_common"

DALVIK.prismSW = [:]
DALVIK.prismSW.javahInclude = ["com/sun/pisces/**/*"]
DALVIK.prismSW.nativeSource = file("modules/graphics/src/main/native-prism-sw")
DALVIK.prismSW.compiler = compiler
DALVIK.prismSW.ccFlags = [ccFlags, ccWarnFlags, ccArchFlags, ccOptFlags,
    ccDebugFlags, ccDefaultIncludeFlags].flatten()
DALVIK.prismSW.linker = linker
DALVIK.prismSW.linkFlags = [linkFlags, linkArchFlags].flatten()
DALVIK.prismSW.lib = "prism_sw"

DALVIK.decora = [:]
DALVIK.decora.variants = ["armeabiv7a", "arm64v8a"]
DALVIK.decora.armeabiv7a = [:]
DALVIK.decora.arm64v8a = [:]

DALVIK.decora.armeabiv7a.compiler = compiler
DALVIK.decora.armeabiv7a.ccFlags = [ccFlags, ccWarnFlags, ccArmeabiv7aFlags, ccOptFlags,
    ccDebugFlags, ccDefaultIncludeFlags].flatten()
DALVIK.decora.armeabiv7a.linker = linker
DALVIK.decora.armeabiv7a.linkFlags = [linkFlags, linkArmeabiv7aFlags].flatten()
DALVIK.decora.armeabiv7a.lib = "decora_sse"

DALVIK.decora.arm64v8a.compiler = compiler
DALVIK.decora.arm64v8a.ccFlags = [ccFlags, ccWarnFlags, ccArm64v8aFlags, ccOptFlags,
    ccDebugFlags, ccDefaultIncludeFlags].flatten()
DALVIK.decora.arm64v8a.linker = linker
DALVIK.decora.arm64v8a.linkFlags = [linkFlags, linkArm64v8aFlags].flatten()
DALVIK.decora.arm64v8a.lib = "decora_sse"

DALVIK.iio = [:]
DALVIK.iio.variants = ["armeabiv7a", "arm64v8a"]
DALVIK.iio.armeabiv7a = [:]
DALVIK.iio.arm64v8a = [:]
DALVIK.iio.javahInclude = ["com/sun/javafx/iio/**/*"]

DALVIK.iio.armeabiv7a.nativeSource = [
    file("modules/graphics/src/main/native-iio"),
    file("modules/graphics/src/main/native-iio/libjpeg7")]
DALVIK.iio.armeabiv7a.compiler = compiler
DALVIK.iio.armeabiv7a.ccFlags = [ccFlags, ccWarnFlags, ccArmeabiv7aFlags, ccOptFlags,
    ccDebugFlags, ccDefaultIncludeFlags].flatten()
DALVIK.iio.armeabiv7a.linker = linker
DALVIK.iio.armeabiv7a.linkFlags = [linkFlags, linkArmeabiv7aFlags].flatten()
DALVIK.iio.armeabiv7a.lib = "javafx_iio"

DALVIK.iio.arm64v8a.nativeSource = [
    file("modules/graphics/src/main/native-iio"),
    file("modules/graphics/src/main/native-iio/libjpeg7")]
DALVIK.iio.arm64v8a.compiler = compiler
DALVIK.iio.arm64v8a.ccFlags = [ccFlags, ccWarnFlags, ccArm64v8aFlags, ccOptFlags,
    ccDebugFlags, ccDefaultIncludeFlags].flatten()
DALVIK.iio.arm64v8a.linker = linker
DALVIK.iio.arm64v8a.linkFlags = [linkFlags, linkArm64v8aFlags].flatten()
DALVIK.iio.arm64v8a.lib = "javafx_iio"

DALVIK.prismES2 = [:]
DALVIK.prismES2.variants = ["armeabiv7a", "arm64v8a"]
DALVIK.prismES2.armeabiv7a = [:]
DALVIK.prismES2.arm64v8a = [:]
DALVIK.prismES2.javahInclude = ["com/sun/prism/es2/**/*"]

DALVIK.prismES2.armeabiv7a.nativeSource = [
    file("modules/graphics/src/main/native-prism-es2"),
    file("modules/graphics/src/main/native-prism-es2/GL"),
    file("modules/graphics/src/main/native-prism-es2/eglWrapper"),
    file("modules/graphics/src/main/native-prism-es2/monocle")
]
DALVIK.prismES2.armeabiv7a.compiler = compiler
DALVIK.prismES2.armeabiv7a.ccFlags = [ccFlags, ccWarnFlags, ccArmeabiv7aFlags, ccOptFlags,
    ccDebugFlags, ccDefaultIncludeFlags, "-DIS_EGLFB"].flatten()
DALVIK.prismES2.armeabiv7a.linker = linker
DALVIK.prismES2.armeabiv7a.linkFlags = [linkFlags, linkArmeabiv7aFlags, "-ldl", "-llog", "-lGLESv2", "-lEGL"].flatten()
DALVIK.prismES2.armeabiv7a.lib = "prism_es2_monocle"

DALVIK.prismES2.arm64v8a.nativeSource = [
    file("modules/graphics/src/main/native-prism-es2"),
    file("modules/graphics/src/main/native-prism-es2/GL"),
    file("modules/graphics/src/main/native-prism-es2/eglWrapper"),
    file("modules/graphics/src/main/native-prism-es2/monocle")
]
DALVIK.prismES2.arm64v8a.compiler = compiler
DALVIK.prismES2.arm64v8a.ccFlags = [ccFlags, ccWarnFlags, ccArm64v8aFlags, ccOptFlags,
    ccDebugFlags, ccDefaultIncludeFlags, "-DIS_EGLFB"].flatten()
DALVIK.prismES2.arm64v8a.linker = linker
DALVIK.prismES2.arm64v8a.linkFlags = [linkFlags, linkArm64v8aFlags, "-ldl", "-llog", "-lGLESv2", "-lEGL"].flatten()
DALVIK.prismES2.arm64v8a.lib = "prism_es2_monocle"

DALVIK.font = [:]
DALVIK.font.variants = ["armeabiv7a", "arm64v8a"]
DALVIK.font.armeabiv7a = [:]
DALVIK.font.arm64v8a = [:]
DALVIK.font.javahInclude = [
        "com/sun/javafx/font/**/*",
        "com/sun/javafx/text/**/*"]

DALVIK.font.armeabiv7a.nativeSource = [file("$closedDir/javafx-font-native/src")]
DALVIK.font.armeabiv7a.compiler = compiler
DALVIK.font.armeabiv7a.ccFlags = [ccFlags, ccWarnFlags, ccArmeabiv7aFlags, ccOptFlags,
    ccDebugFlags, ccDefaultIncludeFlags].flatten()
DALVIK.font.armeabiv7a.linker = linker
DALVIK.font.armeabiv7a.linkFlags = [linkFlags, linkArmeabiv7aFlags].flatten()
DALVIK.font.armeabiv7a.lib = "javafx_font"

DALVIK.font.arm64v8a.nativeSource = [file("$closedDir/javafx-font-native/src")]
DALVIK.font.arm64v8a.compiler = compiler
DALVIK.font.arm64v8a.ccFlags = [ccFlags, ccWarnFlags, ccArm64v8aFlags, ccOptFlags,
    ccDebugFlags, ccDefaultIncludeFlags].flatten()
DALVIK.font.arm64v8a.linker = linker
DALVIK.font.arm64v8a.linkFlags = [linkFlags, linkArm64v8aFlags].flatten()
DALVIK.font.arm64v8a.lib = "javafx_font"

if (compileNativeText) {
    DALVIK.fontNativeFreetype = [:]
    DALVIK.fontNativeFreetype.variants = ["armeabiv7a", "arm64v8a"]
    DALVIK.fontNativeFreetype.armeabiv7a = [:]
    DALVIK.fontNativeFreetype.arm64v8a = [:]
    DALVIK.fontNativeFreetype.javahInclude = [
        "com/sun/javafx/font/freetype/OSFreetype.class"
    ]
    DALVIK.fontNativeFreetype.armeabiv7a.nativeSource = [
        file("modules/graphics/src/main/native-font/freetype.c")
    ]
    DALVIK.fontNativeFreetype.armeabiv7a.compiler = compiler
    DALVIK.fontNativeFreetype.armeabiv7a.linker = linker
    DALVIK.fontNativeFreetype.armeabiv7a.lib = "javafx_font_freetype"

    ccFlags += ["-D_ENABLE_HARFBUZZ"]

    DALVIK.fontNativeFreetype.armeabiv7a.ccFlags = 
        [ccFlags, ccWarnFlags, ccArmeabiv7aFlags, ccOptFlags,
        ccDebugFlags, ccDefaultIncludeFlags,
         "-I$freetypeDir/armeabi-v7a/include", "-I$freetypeDir/armeabi-v7a/include/freetype2"].flatten()
        
    DALVIK.fontNativeFreetype.armeabiv7a.linkFlags = 
        [linkFlags, linkArmeabiv7aFlags, "-llog", 
         "-L$freetypeDir/armeabi-v7a/lib", "$freetypeDir/armeabi-v7a/lib/libfreetype.a"].flatten()

    DALVIK.fontNativeFreetype.arm64v8a.nativeSource = [
        file("modules/graphics/src/main/native-font/freetype.c")
    ]
    DALVIK.fontNativeFreetype.arm64v8a.compiler = compiler
    DALVIK.fontNativeFreetype.arm64v8a.linker = linker
    DALVIK.fontNativeFreetype.arm64v8a.lib = "javafx_font_freetype"

    DALVIK.fontNativeFreetype.arm64v8a.ccFlags = 
        [ccFlags, ccWarnFlags, ccArm64v8aFlags, ccOptFlags,
        ccDebugFlags, ccDefaultIncludeFlags,
         "-I$freetypeDir/arm64-v8a/include", "-I$freetypeDir/arm64-v8a/include/freetype2"].flatten()
        
    DALVIK.fontNativeFreetype.arm64v8a.linkFlags = 
        [linkFlags, linkArm64v8aFlags, "-llog", 
         "-L$freetypeDir/arm64-v8a/lib", "$freetypeDir/arm64-v8a/lib/libfreetype.a"].flatten()
}

DALVIK.media = [:]
DALVIK.media.compiler = compiler
DALVIK.media.linker = linker
DALVIK.media.lib = file("$compilerHome/bin/${toolchainArchs[0]}-ar").getAbsolutePath()
DALVIK.includeEGL = true
DALVIK.includeGTK = true
DALVIK.includeLens = true
ext.IS_COMPILE_PANGO = false
ext.IS_COMPILE_JFR = false
